# lib/gerador_heuristicas_dinamicas.py
"""
SISTEMA DE HEUR√çSTICAS DIN√ÇMICAS
Substitui heur√≠sticas fixas por l√≥gicas geradas automaticamente
"""

import os
import sys
import json
import numpy as np
from typing import List, Dict, Any, Set
from collections import Counter
from lib.gerador_logicas_ultra import GeradorLogicasEscalavelUltra
from universal_wrapper import UniversalWrapper

class HeuristicaDinamica:
    """Classe base para heur√≠sticas din√¢micas geradas automaticamente"""
    
    def __init__(self, nome: str, logica: List[str], descricao: str, dependencias: Set[str]):
        self.NOME = nome
        self.DESCRICAO = descricao
        self.DEPENDENCIAS = dependencias
        self.logica = logica
        self.wrapper = UniversalWrapper()
        
    def prever(self, estatisticas: Dict[str, Any], n: int = 5) -> List[int]:
        """
        Executa a l√≥gica din√¢mica nas estat√≠sticas para gerar previs√µes
        """
        try:
            # Converter estat√≠sticas em formato adequado para as fun√ß√µes
            dados_entrada = self._preparar_dados_entrada(estatisticas)
            
            # Executar a cadeia de fun√ß√µes
            resultado = dados_entrada
            for funcao in self.logica:
                if hasattr(self.wrapper, funcao):
                    resultado = getattr(self.wrapper, funcao)(resultado)
                else:
                    # Fallback para fun√ß√µes n√£o encontradas
                    resultado = self._funcao_fallback(funcao, resultado)
            
            # Converter resultado em n√∫meros de 1-49
            numeros_previstos = self._extrair_numeros_previsao(resultado, n)
            return numeros_previstos
            
        except Exception as e:
            print(f"Erro na heur√≠stica {self.NOME}: {e}")
            return []
    
    def _preparar_dados_entrada(self, estatisticas: Dict[str, Any]) -> List[float]:
        """
        Prepara os dados de entrada a partir das estat√≠sticas dispon√≠veis
        """
        dados = []
        
        # Extrair valores num√©ricos das estat√≠sticas
        for dep in self.DEPENDENCIAS:
            if dep in estatisticas:
                valor = estatisticas[dep]
                dados.extend(self._extrair_valores_numericos(valor))
        
        # Se n√£o encontrou dados suficientes, usar fallback
        if len(dados) < 5:
            dados = list(range(1, 50))  # Todos os n√∫meros poss√≠veis
            
        return dados[:100]  # Limitar tamanho para performance
    
    def _extrair_valores_numericos(self, obj: Any) -> List[float]:
        """Extrai valores num√©ricos de diferentes estruturas de dados"""
        valores = []
        
        if isinstance(obj, (int, float)):
            valores.append(float(obj))
        elif isinstance(obj, (list, tuple)):
            for item in obj:
                valores.extend(self._extrair_valores_numericos(item))
        elif isinstance(obj, dict):
            for key, value in obj.items():
                if isinstance(key, (int, float)):
                    valores.append(float(key))
                valores.extend(self._extrair_valores_numericos(value))
        elif isinstance(obj, Counter):
            valores.extend([float(k) for k in obj.keys() if isinstance(k, (int, float))])
            valores.extend([float(v) for v in obj.values() if isinstance(v, (int, float))])
        
        return [v for v in valores if 1 <= v <= 49 or 0 < v < 100]
    
    def _funcao_fallback(self, nome_funcao: str, dados: List[float]) -> List[float]:
        """Fallback para fun√ß√µes n√£o implementadas"""
        fallbacks = {
            'mean': lambda x: [np.mean(x)] if x else [0],
            'sum': lambda x: [sum(x)] if x else [0],
            'max': lambda x: [max(x)] if x else [0],
            'min': lambda x: [min(x)] if x else [0],
            'std': lambda x: [np.std(x)] if len(x) > 1 else [0],
        }
        
        if nome_funcao in fallbacks:
            return fallbacks[nome_funcao](dados)
        else:
            return dados  # Retorna os dados sem modifica√ß√£o
    
    def _extrair_numeros_previsao(self, resultado: Any, n: int = 5) -> List[int]:
        """
        Converte o resultado das fun√ß√µes em n√∫meros de loteria (1-49)
        """
        try:
            numeros = []
            
            # Diferentes tipos de resultado
            if isinstance(resultado, (int, float)):
                num = int(round(resultado))
                if 1 <= num <= 49:
                    numeros.append(num)
                    
            elif isinstance(resultado, (list, tuple)):
                for item in resultado:
                    if isinstance(item, (int, float)):
                        num = int(round(item))
                        if 1 <= num <= 49 and num not in numeros:
                            numeros.append(num)
                    elif isinstance(item, (list, tuple)):
                        numeros.extend(self._extrair_numeros_previsao(item, n))
            
            # Garantir que temos n√∫meros √∫nicos entre 1-49
            numeros = [n for n in numeros if 1 <= n <= 49]
            numeros = list(dict.fromkeys(numeros))  # Remover duplicatas mantendo ordem
            
            # Se n√£o temos n√∫meros suficientes, completar aleatoriamente
            while len(numeros) < n and len(numeros) < 49:
                for num in range(1, 50):
                    if num not in numeros:
                        numeros.append(num)
                    if len(numeros) >= n:
                        break
            
            return numeros[:n]
            
        except Exception:
            # Fallback: n√∫meros aleat√≥rios
            return list(np.random.choice(range(1, 50), size=n, replace=False))

class GeradorHeuristicasDinamicas:
    """
    Gerencia a cria√ß√£o e evolu√ß√£o de heur√≠sticas din√¢micas
    """
    
    def __init__(self):
        self.gerador_logicas = GeradorLogicasEscalavelUltra()
        self.heuristicas_ativas: Dict[str, HeuristicaDinamica] = {}
        self.historico_desempenho = []
        
    def gerar_heuristicas_para_loteria(self, quantidade: int = 20) -> Dict[str, HeuristicaDinamica]:
        """
        Gera heur√≠sticas espec√≠ficas para an√°lise de loteria
        """
        print("üéØ Gerando heur√≠sticas din√¢micas para loteria...")
        
        # Objetivos espec√≠ficos para loteria
        objetivos_loteria = [
            'analise_estatistica',
            'analise_series_temporais', 
            'teoria_informacao',
            'otimizacao'
        ]
        
        todas_heuristicas = {}
        
        for i in range(quantidade):
            objetivo = np.random.choice(objetivos_loteria)
            
            # Gerar l√≥gica inteligente
            logica = self.gerador_logicas.gerar_logica_inteligente_avancada(
                objetivo=objetivo,
                complexidade="media",
                comprimento=(3, 6)
            )
            
            if logica and len(logica) >= 2:
                # Determinar depend√™ncias baseadas nas fun√ß√µes usadas
                dependencias = self._mapear_dependencias(logica)
                
                # Criar heur√≠stica din√¢mica
                nome = f"heuristica_dinamica_{i+1:02d}"
                descricao = f"L√≥gica: {' ‚Üí '.join(logica)}"
                
                heuristica = HeuristicaDinamica(
                    nome=nome,
                    logica=logica,
                    descricao=descricao,
                    dependencias=dependencias
                )
                
                todas_heuristicas[nome] = heuristica
                print(f"‚úÖ {nome}: {descricao}")
        
        self.heuristicas_ativas = todas_heuristicas
        return todas_heuristicas
    
    def _mapear_dependencias(self, logica: List[str]) -> Set[str]:
        """
        Mapeia as fun√ß√µes da l√≥gica para depend√™ncias de estat√≠sticas
        """
        mapeamento_funcao_para_dependencia = {
            # Fun√ß√µes estat√≠sticas b√°sicas
            'mean': {'frequencia_total', 'frequencia_recente'},
            'std': {'frequencia_total', 'gaps_medios'},
            'sum': {'frequencia_total'},
            'max': {'frequencia_total', 'ausencia_atual'},
            'min': {'frequencia_total', 'ausencia_atual'},
            
            # Fun√ß√µes de an√°lise temporal
            'fft_magnitude': {'frequencia_recente', 'frequencia_por_ciclo'},
            'autocorr': {'frequencia_recente', 'gaps_medios'},
            'lyapunov_exponent': {'frequencia_recente', 'gaps_medios'},
            
            # Fun√ß√µes de teoria da informa√ß√£o
            'shannon_entropy': {'frequencia_total', 'frequencia_recente'},
            'mutual_info': {'frequencia_pares', 'frequencia_trios'},
            
            # Fun√ß√µes de otimiza√ß√£o
            'genetic_algorithm': {'frequencia_total', 'ausencia_atual'},
        }
        
        dependencias = set()
        for funcao in logica:
            if funcao in mapeamento_funcao_para_dependencia:
                dependencias.update(mapeamento_funcao_para_dependencia[funcao])
            else:
                # Depend√™ncias padr√£o para fun√ß√µes n√£o mapeadas
                dependencias.update(['frequencia_total', 'frequencia_recente'])
        
        return dependencias if dependencias else {'frequencia_total', 'frequencia_recente'}
    
    def avaliar_desempenho_heuristicas(self, dados_manager, num_testes: int = 10):
        """
        Avalia o desempenho das heur√≠sticas em dados hist√≥ricos
        """
        print("üìä Avaliando desempenho das heur√≠sticas din√¢micas...")
        
        if not self.heuristicas_ativas:
            print("‚ùå Nenhuma heur√≠stica ativa para avaliar")
            return
        
        historico = dados_manager.sorteios
        if len(historico) < num_testes + 1:
            print("‚ùå Dados hist√≥ricos insuficientes para avalia√ß√£o")
            return
        
        resultados = []
        
        for i in range(len(historico) - num_testes, len(historico) - 1):
            # Dados de treino (at√© o ponto atual)
            historico_treino = historico[:i+1]
            dados_treino = type(dados_manager)()  # Nova inst√¢ncia
            dados_treino.sorteios = historico_treino
            
            # Pr√≥ximo sorteio real (alvo)
            sorteio_alvo = set(historico[i+1]['numeros'])
            
            # Calcular estat√≠sticas para o ponto atual
            todas_dependencias = set()
            for heuristica in self.heuristicas_ativas.values():
                todas_dependencias.update(heuristica.DEPENDENCIAS)
            
            estatisticas, _ = dados_treino.obter_estatisticas(todas_dependencias)
            
            # Avaliar cada heur√≠stica
            for nome, heuristica in self.heuristicas_ativas.items():
                try:
                    previsao = set(heuristica.prever(estatisticas, n=5))
                    acertos = len(previsao.intersection(sorteio_alvo))
                    
                    resultados.append({
                        'heuristica': nome,
                        'timestamp': i,
                        'acertos': acertos,
                        'previsao': list(previsao),
                        'real': list(sorteio_alvo)
                    })
                    
                except Exception as e:
                    print(f"‚ùå Erro avaliando {nome}: {e}")
        
        # Agrupar resultados por heur√≠stica
        desempenho = {}
        for resultado in resultados:
            nome = resultado['heuristica']
            if nome not in desempenho:
                desempenho[nome] = []
            desempenho[nome].append(resultado['acertos'])
        
        # Calcular m√©tricas
        ranking = []
        for nome, acertos in desempenho.items():
            taxa_acerto = np.mean(acertos) / 5.0  # 5 n√∫meros previstos
            estabilidade = 1.0 - (np.std(acertos) / np.mean(acertos)) if acertos else 0
            
            ranking.append({
                'nome': nome,
                'taxa_acerto': taxa_acerto,
                'estabilidade': estabilidade,
                'score': taxa_acerto * 0.7 + estabilidade * 0.3
            })
        
        ranking.sort(key=lambda x: x['score'], reverse=True)
        self.historico_desempenho = ranking
        
        print("üèÜ RANKING DAS HEUR√çSTICAS:")
        for i, heur in enumerate(ranking[:10]):
            print(f"  {i+1}. {heur['nome']}: {heur['taxa_acerto']:.3f} (score: {heur['score']:.3f})")
        
        return ranking
    
    def obter_melhores_heuristicas(self, top_n: int = 10) -> Dict[str, HeuristicaDinamica]:
        """Retorna as melhores heur√≠sticas baseado no desempenho hist√≥rico"""
        if not self.historico_desempenho:
            return self.heuristicas_ativas
        
        melhores_nomes = [h['nome'] for h in self.historico_desempenho[:top_n]]
        return {nome: self.heuristicas_ativas[nome] for nome in melhores_nomes 
                if nome in self.heuristicas_ativas}
