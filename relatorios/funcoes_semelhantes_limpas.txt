🔍 Funções com lógica semelhante (estrutura parecida):

⚠️ `shortest_path_all_pairs` em lib/funcoes_limpas/algoritmos_grafos.py
   ≈ `shortest_paths_length` em lib/funcoes_limpas/grafos.py
   🔁 Similaridade: 92.52%

⚠️ `digamma_func` em lib/funcoes_limpas/matematica_especial.py
   ≈ `gamma_func` em lib/funcoes_limpas/funcoes_especiais.py
   🔁 Similaridade: 88.64%

⚠️ `bessel_y` em lib/funcoes_limpas/matematica_especial.py
   ≈ `bessel_j` em lib/funcoes_limpas/funcoes_especiais.py
   🔁 Similaridade: 88.89%

⚠️ `chebyshev_t` em lib/funcoes_limpas/matematica_especial.py
   ≈ `chebyshev_T` em lib/funcoes_limpas/funcoes_especiais.py
   🔁 Similaridade: 86.49%

⚠️ `fibonacci` em lib/funcoes_limpas/numeros_especiais.py
   ≈ `fibonacci_num` em lib/funcoes_limpas/teoria_numeros.py
   🔁 Similaridade: 96.0%

⚠️ `lucas` em lib/funcoes_limpas/numeros_especiais.py
   ≈ `lucas_num` em lib/funcoes_limpas/teoria_numeros.py
   🔁 Similaridade: 95.41%

⚠️ `catalan_number` em lib/funcoes_limpas/numeros_especiais.py
   ≈ `catalan_num` em lib/funcoes_limpas/teoria_numeros.py
   🔁 Similaridade: 95.73%

⚠️ `sum_combinations2` em lib/funcoes_limpas/combinatoria_avancada.py
   ≈ `sum_of_pairs` em lib/funcoes_limpas/analise_padroes.py
   🔁 Similaridade: 87.43%

⚠️ `sum_combinations2` em lib/funcoes_limpas/combinatoria_avancada.py
   ≈ `sum_of_triples` em lib/funcoes_limpas/analise_padroes.py
   🔁 Similaridade: 87.43%

⚠️ `sum_combinations3` em lib/funcoes_limpas/combinatoria_avancada.py
   ≈ `sum_of_pairs` em lib/funcoes_limpas/analise_padroes.py
   🔁 Similaridade: 86.23%

⚠️ `sum_combinations3` em lib/funcoes_limpas/combinatoria_avancada.py
   ≈ `sum_of_triples` em lib/funcoes_limpas/analise_padroes.py
   🔁 Similaridade: 88.62%

