# organizador_biblioteca.py
import os
import shutil
import datetime
from ast_consolidador import ASTConsolidator

# =================================================================
# CONFIGURA√á√ïES
# =================================================================
DIR_ORIGEM = 'lib/funcoes_analiticas'
DIR_DESTINO = 'lib/funcoes_limpas'

# REGRAS CAN√ìNICAS - Defina aqui TODAS as suas duplica√ß√µes
REGRAS_CANONICAS = {
    # Estat√≠sticas B√°sicas ‚Üí estatisticas.py
    ("unique_count", "conjuntos"): ("estatisticas", None),
    ("intersection", "conjuntos"): ("estatisticas", None),
    ("union", "conjuntos"): ("estatisticas", None),
    ("mirror_count", "conjuntos"): ("estatisticas", None),
    ("pair_sum_count", "conjuntos"): ("estatisticas", None),
    ("iqr_outliers", "deteccao_anomalias"): ("estatisticas", None),
    
    # N√∫meros Especiais ‚Üí numeros_especiais.py
    ("bell_number", "teoria_numeros"): ("numeros_especiais", "bell_number"),
    ("partition_number", "teoria_numeros"): ("numeros_especiais", "partition_number"),
    ("bernoulli_number", "teoria_numeros"): ("numeros_especiais", "bernoulli_number"),
    ("fibonacci", "teoria_numeros"): ("numeros_especiais", "fibonacci_num"),
    ("lucas", "teoria_numeros"): ("numeros_especiais", "lucas_num"),
    ("catalan_number", "teoria_numeros"): ("numeros_especiais", "catalan_num"),
    
    # Fun√ß√µes Especiais ‚Üí funcoes_especiais.py
    ("gamma_func", "matematica_especial"): ("funcoes_especiais", None),
    ("beta_func", "matematica_especial"): ("funcoes_especiais", None),
    ("bessel_j", "matematica_especial"): ("funcoes_especiais", None),
    
    # Processamento de Sinal ‚Üí temporais.py
    ("fft_phase", "processamento_sinal"): ("temporais", None),
    ("ifft_real", "processamento_sinal"): ("temporais", None),
    
    # Teoria da Informa√ß√£o ‚Üí teoria_informacao.py
    ("mutual_info", "estatistica_multivariada"): ("teoria_informacao", None),
    ("normalized_mutual_info", "estatistica_multivariada"): ("teoria_informacao", None),
}

# Fun√ß√µes que requerem interven√ß√£o manual
ACOES_MANUAIS = [
    "sum_of_pairs",
    "sum_of_triples", 
    "shortest_paths_length",
]

# =================================================================
# FUN√á√ïES AUXILIARES
# =================================================================
def criar_backup_original():
    """Cria um backup da biblioteca original."""
    if os.path.exists(DIR_ORIGEM):
        timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_dir = f"backup_biblioteca_original_{timestamp}"
        shutil.copytree(DIR_ORIGEM, backup_dir)
        print(f"üì¶ Backup criado: {backup_dir}")
        return backup_dir
    else:
        print("‚ö†Ô∏è Diret√≥rio original n√£o encontrado.")
        return None

def preparar_area_staging():
    """Prepara a √°rea de staging copiando a biblioteca original."""
    # Limpar staging anterior
    if os.path.exists(DIR_DESTINO):
        shutil.rmtree(DIR_DESTINO)
        print("‚ôªÔ∏è  Staging anterior removido")
    
    # Criar nova √°rea de staging
    shutil.copytree(DIR_ORIGEM, DIR_DESTINO)
    print(f"‚úÖ √Årea de staging criada: {DIR_DESTINO}")

def verificar_ambiente():
    """Verifica se o ambiente est√° pronto para execu√ß√£o."""
    if not os.path.exists(DIR_ORIGEM):
        print(f"‚ùå ERRO: Diret√≥rio original '{DIR_ORIGEM}' n√£o encontrado!")
        return False
    
    try:
        import astunparse
        return True
    except ImportError:
        print("‚ùå ERRO: 'astunparse' n√£o instalado. Execute: pip install astunparse")
        return False

# =================================================================
# ORQUESTRADOR PRINCIPAL
# =================================================================
def executar_consolidacao_automatica():
    """Executa o processo completo de consolida√ß√£o."""
    print("üßπ ORGANIZADOR DE BIBLIOTECA - MODO STAGING")
    print("=" * 60)
    
    # Verificar ambiente
    if not verificar_ambiente():
        return
    
    # Prepara√ß√£o
    criar_backup_original()
    preparar_area_staging()
    
    print("\nüöÄ INICIANDO LIMPEZA NA √ÅREA DE STAGING")
    print("=" * 60)
    
    sucesso_count = 0
    falha_count = 0
    ignoradas_count = 0
    
    # Processar cada regra can√≥nica
    for (func_name, source_mod), (target_mod, novo_nome) in REGRAS_CANONICAS.items():
        source_path = os.path.join(DIR_DESTINO, f"{source_mod}.py")
        
        # Verificar se o m√≥dulo de origem existe no staging
        if not os.path.exists(source_path):
            print(f"üìã {func_name}: ‚ùå M√≥dulo '{source_mod}.py' n√£o encontrado no staging")
            ignoradas_count += 1
            continue
            
        print(f"üìã {func_name}: {source_mod}.py ‚Üí {target_mod}.py")
        
        try:
            consolidator = ASTConsolidator(target_mod, source_mod, DIR_DESTINO)
            resultado = consolidator.mover_funcao(func_name, novo_nome)
            
            if resultado:
                sucesso_count += 1
            else:
                falha_count += 1
                
        except Exception as e:
            print(f"    ‚ùå Erro inesperado: {e}")
            falha_count += 1
    
    # Relat√≥rio Final
    print("\n" + "=" * 60)
    print("üìä RELAT√ìRIO FINAL DA AUTOMA√á√ÉO")
    print("=" * 60)
    print(f"‚úÖ Consolida√ß√µes bem sucedidas: {sucesso_count}")
    print(f"‚ùå Falhas no processamento: {falha_count}")
    print(f"‚ö†Ô∏è  Ignoradas (m√≥dulo n√£o encontrado): {ignoradas_count}")
    
    # A√ß√µes Manuais
    if ACOES_MANUAIS:
        mostrar_relatorio_manual()
    
    print(f"\nüéØ PR√ìXIMOS PASSOS:")
    print(f"   1. Biblioteca limpa dispon√≠vel em: {DIR_DESTINO}")
    print(f"   2. Biblioteca original preservada em: {DIR_ORIGEM}")
    print(f"   3. Resolva as a√ß√µes manuais listadas acima")
    print(f"   4. Quando satisfeito, substitua {DIR_ORIGEM} por {DIR_DESTINO}")

def mostrar_relatorio_manual():
    """Mostra as a√ß√µes que precisam de interven√ß√£o manual."""
    print("\nüîß A√á√ïES MANUAIS NECESS√ÅRIAS")
    print("=" * 60)
    print("Estas fun√ß√µes t√™m conflitos de L√ìGICA e precisam de fus√£o manual:")
    
    for i, acao in enumerate(ACOES_MANUAIS, 1):
        print(f"   {i}. ‚ö†Ô∏è  {acao}")
    
    print(f"\nüìù INSTRU√á√ïES:")
    print(f"   ‚Ä¢ Edite APENAS a pasta '{DIR_DESTINO}'")
    print(f"   ‚Ä¢ Analise o c√≥digo de cada fun√ß√£o em conflito")
    print(f"   ‚Ä¢ Escolha a implementa√ß√£o mais eficiente")
    print(f"   ‚Ä¢ Funda manualmente e remova duplicados")

# =================================================================
# EXECU√á√ÉO
# =================================================================
if __name__ == "__main__":
    executar_consolidacao_automatica()
