#!/usr/bin/env python3
"""
GERADOR DE UNIVERSAL WRAPPER
Gera wrapper √∫nico a partir dos wrappers por categoria gerados anteriormente
"""

import os
import re
import ast
import sys
from datetime import datetime

def gerar_universal_wrapper():
    """Gera UniversalWrapper √∫nico baseado nos wrappers por categoria."""
    
    print("üåê Iniciando gera√ß√£o do UniversalWrapper...")
    
    # Caminhos dos arquivos
    wrappers_file = "lib/funcoes_wrappers_auto.py"
    output_file = "lib/universal_wrapper.py"
    
    if not os.path.exists(wrappers_file):
        print(f"‚ùå Arquivo de wrappers n√£o encontrado: {wrappers_file}")
        print("üí° Execute primeiro: python scripts/gerar_wrappers_funcoes.py")
        return False
    
    # Ler wrappers gerados
    with open(wrappers_file, "r", encoding="utf-8") as f:
        wrappers_content = f.read()
    
    # DEBUG: Ver o conte√∫do do arquivo
    print(f"üìÑ Tamanho do arquivo de wrappers: {len(wrappers_content)} bytes")
    
    # Extrair todas as classes - m√©todo mais robusto
    classes = re.findall(r'class (\w+Wrapper):.*?(?=class|\Z)', wrappers_content, re.DOTALL)
    
    print(f"üîç Encontradas {len(classes)} classes de wrapper")
    
    universal_methods = []
    imports_set = set()
    total_funcoes = 0
    
    for class_block in classes:
        class_match = re.match(r'class (\w+Wrapper)', class_block)
        if not class_match:
            continue
            
        class_name = class_match.group(1)
        imports_set.add(class_name)
        print(f"üì¶ Processando classe: {class_name}")
        
        # Extrair m√©todos - m√©todo mais simples e direto
        method_matches = re.findall(r'@staticmethod\s+def (\w+)\([^)]*\):', class_block)
        
        for method_name in method_matches:
            if not method_name.startswith('_'):
                # Criar m√©todo no UniversalWrapper
                method_template = f'''
    @staticmethod
    def {method_name}(*args, **kwargs):
        """M√©todo universal para {method_name}"""
        from lib.funcoes_wrappers_auto import {class_name}
        return {class_name}.{method_name}(*args, **kwargs)
'''
                universal_methods.append(method_template)
                total_funcoes += 1
                print(f"   ‚úÖ Adicionado m√©todo: {method_name}")
    
    if total_funcoes == 0:
        print("‚ùå Nenhuma fun√ß√£o encontrada nos wrappers")
        print("üîç Tentando m√©todo alternativo de extra√ß√£o...")
        
        # M√©todo alternativo: procurar diretamente por m√©todos
        all_methods = re.findall(r'def (\w+)\([^)]*\):', wrappers_content)
        unique_methods = set([m for m in all_methods if not m.startswith('_')])
        
        print(f"üîç M√©todos encontrados (alternativo): {len(unique_methods)}")
        for method in sorted(unique_methods)[:10]:  # Mostrar primeiros 10
            print(f"   - {method}")
        
        if unique_methods:
            # Se encontrou m√©todos, criar UniversalWrapper b√°sico
            class_name = "FuncoesAnaliticasWrapper"  # Assumir nome padr√£o
            imports_set.add(class_name)
            
            for method_name in sorted(unique_methods):
                method_template = f'''
    @staticmethod
    def {method_name}(*args, **kwargs):
        """M√©todo universal para {method_name}"""
        from lib.funcoes_wrappers_auto import {class_name}
        return {class_name}.{method_name}(*args, **kwargs)
'''
                universal_methods.append(method_template)
                total_funcoes += 1
            
            print(f"üîÑ Criado UniversalWrapper com {total_funcoes} m√©todos (m√©todo alternativo)")
    
    if total_funcoes == 0:
        print("‚ùå FALHA CR√çTICA - N√£o foi poss√≠vel extrair nenhuma fun√ß√£o")
        return False
    
    # Gerar conte√∫do do UniversalWrapper
    template = f'''"""
UNIVERSAL WRAPPER - Interface √önica para Todas as Fun√ß√µes
================================================================
Gerado automaticamente em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Total de fun√ß√µes: {total_funcoes}

‚ö†Ô∏è N√ÉO EDITAR MANUALMENTE - Este arquivo √© gerado automaticamente
   Qualquer altera√ß√£o ser√° sobrescrita na pr√≥xima execu√ß√£o do pipeline.

Fornece acesso unificado a todas as fun√ß√µes atrav√©s de uma interface consistente.
Ideal para algoritmos gen√©ticos e sistemas de ML que precisam compor heur√≠sticas.
"""

class UniversalWrapper:
    """
    Wrapper √∫nico com acesso a todas as fun√ß√µes anal√≠ticas.
    
    Objetivo: Interface padronizada para composi√ß√£o de heur√≠sticas
    Finalidade: Permitir combina√ß√£o livre de fun√ß√µes em algoritmos gen√©ticos/ML
    
    Caracter√≠sticas:
    - Todas as fun√ß√µes retornam List[float] padronizada
    - Tratamento autom√°tico de erros
    - Interface consistente para pipeline de IA
    - {total_funcoes} fun√ß√µes dispon√≠veis
    """
    
'''
    
    # Adicionar imports
    imports_code = "\n".join([f"from lib.funcoes_wrappers_auto import {cls}" for cls in sorted(imports_set)])
    
    # Adicionar m√©todos
    methods_code = "\n".join(universal_methods)
    
    # Adicionar m√©todos utilit√°rios
    util_methods = f'''
    
    @staticmethod
    def get_available_functions():
        """Retorna lista de todas as fun√ß√µes dispon√≠veis."""
        return [method for method in dir(UniversalWrapper) 
                if not method.startswith('_') and callable(getattr(UniversalWrapper, method))]
    
    @staticmethod
    def get_function_count():
        """Retorna o n√∫mero total de fun√ß√µes dispon√≠veis."""
        return {total_funcoes}
    
    @staticmethod
    def get_function_info(func_name):
        """Retorna informa√ß√µes sobre uma fun√ß√£o espec√≠fica."""
        if hasattr(UniversalWrapper, func_name) and callable(getattr(UniversalWrapper, func_name)):
            return f"Fun√ß√£o {{func_name}} dispon√≠vel no UniversalWrapper"
        else:
            return f"Fun√ß√£o {{func_name}} n√£o encontrada"

if __name__ == "__main__":
    # Teste b√°sico
    print(f"üîß UniversalWrapper carregado com {{UniversalWrapper.get_function_count()}} fun√ß√µes")
    print("‚úÖ UniversalWrapper pronto para uso no pipeline!")
'''
    
    # Conte√∫do final
    final_content = template + imports_code + "\n" + methods_code + util_methods
    
    # Garantir que o diret√≥rio existe
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    
    # Escrever arquivo
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(final_content)
    
    print(f"‚úÖ UniversalWrapper gerado: {output_file}")
    print(f"üìä Total de fun√ß√µes inclu√≠das: {total_funcoes}")
    print(f"üì¶ Wrappers importados: {len(imports_set)}")
    
    return True

def main():
    """Executa a gera√ß√£o do UniversalWrapper."""
    print("üîÑ INICIANDO FASE 4: GERA√á√ÉO DO UNIVERSAL WRAPPER...")
    
    try:
        success = gerar_universal_wrapper()
        
        # VERIFICA√á√ÉO FINAL - Para o GitHub Actions
        if success and os.path.exists("lib/universal_wrapper.py"):
            file_size = os.path.getsize("lib/universal_wrapper.py")
            print(f"üéØ FASE 4 CONCLU√çDA - UniversalWrapper gerado ({file_size} bytes) pronto para commit")
            return True
        else:
            print("‚ùå FALHA - UniversalWrapper n√£o foi gerado")
            return False
            
    except Exception as e:
        print(f"üí• Erro no gerador de UniversalWrapper: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
