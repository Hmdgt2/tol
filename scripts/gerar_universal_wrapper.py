import os
import re

def gerar_universal_wrapper():
    """Gera UniversalWrapper √∫nico importando todos os wrappers por categoria."""
    
    # Template do UniversalWrapper
    template = '''"""
UNIVERSAL WRAPPER - Interface √∫nica para todas as fun√ß√µes anal√≠ticas
============================================================

Gerado automaticamente por gerar_universal_wrapper.py
N√ÉO EDITAR MANUALMENTE - Este arquivo ser√° sobrescrito.

Fornece acesso unificado a todas as 154+ fun√ß√µes atrav√©s de uma √∫nica interface.
Ideal para uso em algoritmos gen√©ticos e ML que precisam compor fun√ß√µes livremente.
"""

class UniversalWrapper:
    """
    Wrapper √∫nico com acesso a todas as fun√ß√µes anal√≠ticas.
    
    Objetivo: Fornecer interface padronizada para composi√ß√£o de heur√≠sticas
    Finalidade: Permitir que algoritmos gen√©ticos/ML combinem fun√ß√µes livremente
    
    Caracter√≠sticas:
    - Todas as fun√ß√µes retornam List[float] padronizada
    - Tratamento autom√°tico de erros
    - Interface consistente para o pipeline de IA
    """
    
    # M√©todos ser√£o adicionados dinamicamente abaixo
    pass

# ========== IMPORTA√á√ÉO DIN√ÇMICA DE TODOS OS WRAPPERS ==========

'''
    
    # Ler o arquivo de wrappers gerado para extrair todas as fun√ß√µes
    wrappers_file = "lib/funcoes_wrappers_auto.py"
    
    if not os.path.exists(wrappers_file):
        print("‚ùå Arquivo de wrappers n√£o encontrado. Execute gerar_wrappers_funcoes.py primeiro.")
        return
    
    with open(wrappers_file, "r", encoding="utf-8") as f:
        wrappers_content = f.read()
    
    # Extrair todas as classes de wrapper e seus m√©todos
    classes = re.findall(r'class (\w+Wrapper):.*?(?=class|\Z)', wrappers_content, re.DOTALL)
    
    universal_methods = []
    imports_set = set()
    
    for class_block in classes:
        # Extrair nome da classe
        class_match = re.match(r'class (\w+Wrapper)', class_block)
        if not class_match:
            continue
            
        class_name = class_match.group(1)
        
        # Extrair m√©todos est√°ticos desta classe
        methods = re.findall(r'@staticmethod\s+def (\w+)\([^)]*\):\s*""".*?""".*?return (\w+)\.apply_function\((\w+),', class_block, re.DOTALL)
        
        for method_name, wrapper_class, original_func in methods:
            # Criar m√©todo no UniversalWrapper
            method_code = f'''
    @staticmethod
    def {method_name}(*args, **kwargs):
        """Wrapper para {method_name} - via {wrapper_class}"""
        from lib.funcoes_wrappers_auto import {wrapper_class}
        return {wrapper_class}.{method_name}(*args, **kwargs)
'''
            universal_methods.append(method_code)
            imports_set.add(wrapper_class)
    
    # Gerar imports
    imports_code = "\n".join([f"from lib.funcoes_wrappers_auto import {cls}" for cls in sorted(imports_set)])
    
    # Arquivo final
    final_content = template + imports_code + "\n\n" + "\n".join(universal_methods)
    
    # Adicionar m√©todo de utilidade
    final_content += '''
    
    @staticmethod
    def get_available_functions():
        """Retorna lista de todas as fun√ß√µes dispon√≠veis no wrapper."""
        return [method for method in dir(UniversalWrapper) 
                if not method.startswith('_') and callable(getattr(UniversalWrapper, method))]
    
    @staticmethod
    def get_function_count():
        """Retorna o n√∫mero total de fun√ß√µes dispon√≠veis."""
        return len([method for method in dir(UniversalWrapper) 
                   if not method.startswith('_') and callable(getattr(UniversalWrapper, method))])

# ========== EXEMPLO DE USO ==========

if __name__ == "__main__":
    # Teste b√°sico do UniversalWrapper
    print(f"üîß UniversalWrapper carregado com {UniversalWrapper.get_function_count()} fun√ß√µes")
    
    # Exemplo de uso
    dados = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    
    # Usando diferentes fun√ß√µes atrav√©s da mesma interface
    resultado_fft = UniversalWrapper.fft_magnitude(dados)
    resultado_primes = UniversalWrapper.count_primes(dados)
    resultado_mean = UniversalWrapper.rolling_mean(dados, 3)
    
    print(f"üìä FFT: {resultado_fft}")
    print(f"üî¢ Primos: {resultado_primes}") 
    print(f"üìà M√©dia m√≥vel: {resultado_mean}")
    
    print("‚úÖ UniversalWrapper pronto para uso no pipeline!")
'''
    
    # Escrever arquivo
    output_path = "lib/universal_wrapper.py"
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    
    with open(output_path, "w", encoding="utf-8") as f:
        f.write(final_content)
    
    print(f"‚úÖ UniversalWrapper gerado em: {output_path}")
    print(f"üìä Total de fun√ß√µes inclu√≠das: {len(universal_methods)}")

def main():
    """Executa a gera√ß√£o do UniversalWrapper."""
    print("üöÄ Gerando UniversalWrapper √∫nico...")
    gerar_universal_wrapper()
    print("üéØ Pr√≥ximo passo: Implementar gerador_logicas.py")

if __name__ == "__main__":
    main()
