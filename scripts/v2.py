import os
import ast

# Mapear tipo de m√≥dulo para classe de wrapper, objetivo e finalidade
FUNCAO_CATEGORIA_MAP = {
    "teoria_numeros": ("NumberTheoryWrapper", "Gerar features sobre propriedades num√©ricas (primos, fatores, totiente, etc)", "Feature extraction para ML/heur√≠sticas matem√°ticas"),
    "matematica_especial": ("SpecialMathWrapper", "Explorar padr√µes avan√ßados com fun√ß√µes especiais (Gamma, Beta, Bessel, Airy, etc)", "Extra√ß√£o de features matem√°ticas n√£o triviais"),
    "conjuntos": ("SetFeatureWrapper", "Processar rela√ß√µes entre conjuntos (interse√ß√£o, uni√£o, espelho, contagem)", "Feature extraction e filtragem l√≥gica"),
    "temporais": ("TimeSeriesWrapper", "Detectar padr√µes temporais, tend√™ncias e depend√™ncias", "Feature extraction para previs√µes temporais ou heur√≠sticas evolutivas"),
    "processamento_sinal": ("SignalProcessingWrapper", "Extrair padr√µes espectrais e c√≠clicos (FFT, wavelet, filtros)", "Pr√©-processamento, compress√£o de dados e extra√ß√£o de features"),
    "algoritmos_grafos": ("GraphAlgorithmWrapper", "Executar algoritmos sobre grafos (caminhos, conectividade, ciclos)", "Heur√≠sticas baseadas em conectividade e estrutura"),
    "grafos": ("GraphStatsWrapper", "Extrair m√©tricas de grafos (centralidade, densidade, tri√¢ngulos, etc)", "Feature extraction e avalia√ß√£o de padr√µes estruturais"),
    "estatistica_multivariada": ("MultivariateStatsWrapper", "Avaliar depend√™ncias, vari√¢ncia, clustering e desigualdade", "Feature extraction e valida√ß√£o de heur√≠sticas"),
    "ia_heuristica": ("HeuristicMLWrapper", "Compor heur√≠sticas, testar, evoluir e ranquear heur√≠sticas", "Avalia√ß√£o, recombina√ß√£o e evolu√ß√£o autom√°tica via ML/gen√©tico"),
    "machine_learning": ("MLMetricWrapper", "Avaliar desempenho de heur√≠sticas/modelos (MSE, RMSE, accuracy, etc)", "Sele√ß√£o e evolu√ß√£o autom√°tica de heur√≠sticas/modelos"),
    "simulacao": ("SimulationWrapper", "Gerar dados sint√©ticos ou probabil√≠sticos via Monte Carlo, MCMC", "Valida√ß√£o sob cen√°rios de incerteza"),
    "combinatoria": ("CombinatoricsWrapper", "Avaliar agrupamentos, combina√ß√µes e permuta√ß√µes", "Features de grupos e filtragem combinat√≥ria"),
    "combinatoria_avancada": ("AdvancedCombinatoricsWrapper", "Explorar rela√ß√µes avan√ßadas entre combina√ß√µes e permuta√ß√µes", "Features avan√ßadas para ML ou heur√≠sticas complexas"),
    "aritmetica": ("ArithmeticWrapper", "Realizar opera√ß√µes aritm√©ticas b√°sicas e avan√ßadas", "Composi√ß√£o de features simples ou pr√©-processamento"),
    "analise_numerica": ("NumericalAnalysisWrapper", "Transforma√ß√µes e an√°lises num√©ricas especializadas", "Features de an√°lise num√©rica e filtragem robusta"),
    "exploracao": ("ExplorationWrapper", "Explorar tend√™ncias, diferen√ßas e padr√µes de listas", "Features explorat√≥rias para detec√ß√£o de padr√µes"),
    "plots": ("VisualizationWrapper", "Gerar gr√°ficos e visualiza√ß√µes para diagn√≥stico e debug", "Suporte visual ao pipeline e an√°lise de heur√≠sticas"),
    "modelagem_preditiva": ("PredictiveModelWrapper", "Modelar e prever usando regress√£o (linear, polinomial, etc)", "Predi√ß√£o direta e extra√ß√£o de coeficientes/score"),
    "geometria": ("DistanceWrapper", "Calcular dist√¢ncias e medidas geom√©tricas", "Features espaciais e agrupamentos"),
    "criptografia": ("CryptoWrapper", "Seguran√ßa, aleatoriedade, gera√ß√£o de chaves", "Heur√≠sticas de randomiza√ß√£o ou prote√ß√£o"),
    "analise_primos": ("PrimeAnalysisWrapper", "Explorar propriedades e padr√µes de n√∫meros primos", "Features matem√°ticas e filtragem por primos"),
    "estatistica_nao_parametrica": ("NonParametricStatsWrapper", "Aplicar testes estat√≠sticos n√£o param√©tricos", "An√°lise robusta sem suposi√ß√µes distribucionais"),
    "probabilidade_distribuicoes": ("ProbabilityWrapper", "Modelar distribui√ß√µes e simular probabilidades", "An√°lise probabil√≠stica e gera√ß√£o sint√©tica"),
    "precisao": ("PrecisionWrapper", "Executar c√°lculos com alta precis√£o num√©rica", "C√°lculos cr√≠ticos onde precis√£o √© essencial"),
    "analise_padroes": ("PatternAnalysisWrapper", "Detectar e analisar padr√µes complexos em dados", "Feature extraction para reconhecimento de padr√µes"),
    "estatisticas": ("BasicStatsWrapper", "Calcular estat√≠sticas descritivas b√°sicas", "Features fundamentais para an√°lise explorat√≥ria"),
    "sequencias": ("SequenceAnalysisWrapper", "Analisar propriedades e transforma√ß√µes de sequ√™ncias", "Feature extraction temporal e sequencial"),
    "algebra_simbolica": ("SymbolicMathWrapper", "Realizar opera√ß√µes de √°lgebra simb√≥lica", "Manipula√ß√£o matem√°tica avan√ßada e simb√≥lica"),
    "manipulacao_dados": ("DataManipulationWrapper", "Preprocessar e transformar dados", "Prepara√ß√£o de dados para ML e an√°lise"),
    "numeros_especiais": ("SpecialNumbersWrapper", "Trabalhar com sequ√™ncias num√©ricas especiais", "Features matem√°ticas baseadas em sequ√™ncias conhecidas"),
    "transformacoes": ("TransformationWrapper", "Aplicar transforma√ß√µes matem√°ticas a dados", "Feature engineering via transforma√ß√µes"),
    "deteccao_anomalias": ("AnomalyDetectionWrapper", "Identificar outliers e anomalias em dados", "Detec√ß√£o de valores at√≠picos para limpeza e an√°lise"),
    "series_temporais": ("TimeSeriesAnalysisWrapper", "Analisar e modelar s√©ries temporais", "Feature extraction e previs√£o temporal"),
    "probabilidade": ("ProbabilityTheoryWrapper", "Calcular distribui√ß√µes e medidas probabil√≠sticas", "An√°lise estat√≠stica baseada em probabilidade"),
    "funcoes_especiais": ("SpecialFunctionsWrapper", "Utilizar fun√ß√µes matem√°ticas especiais", "C√°lculos avan√ßados com fun√ß√µes especializadas"),
    "wavelets": ("WaveletAnalysisWrapper", "Aplicar an√°lise wavelet a sinais", "Decomposi√ß√£o multirresolu√ß√£o de sinais"),
    "teoria_informacao": ("InformationTheoryWrapper", "Calcular medidas de teoria da informa√ß√£o", "An√°lise de entropia, informa√ß√£o m√∫tua e complexidade"),
}

BASE_DIR = "lib/funcoes_analiticas"
WRAPPER_MODULE_PATH = "lib/funcoes_wrappers_auto.py"

def categoria_objetivo_finalidade(caminho):
    """Determina a categoria, objetivo e finalidade com base no caminho do arquivo."""
    partes = caminho.split("/")
    if len(partes) >= 2:
        modulo = partes[-2]  # Pasta contendo o arquivo
    else:
        modulo = "generic"
    return FUNCAO_CATEGORIA_MAP.get(modulo, ("GenericFeatureWrapper", "Transforma√ß√£o gen√©rica", "Integra√ß√£o universal para pipeline de IA"))

def extrair_funcoes(base_dir):
    """Extrai todas as fun√ß√µes dos arquivos Python no diret√≥rio base."""
    resultados = []
    total_arquivos = 0
    total_funcoes = 0
    
    for root, _, files in os.walk(base_dir):
        for file in files:
            if file.endswith(".py") and not file.startswith("__"):
                caminho = os.path.join(root, file)
                modulo = os.path.basename(caminho).replace(".py", "")
                total_arquivos += 1
                
                try:
                    with open(caminho, "r", encoding="utf-8") as f:
                        tree = ast.parse(f.read(), filename=caminho)
                        for node in tree.body:
                            if isinstance(node, ast.FunctionDef):
                                nome = node.name
                                if not nome.startswith('_'):  # Ignorar fun√ß√µes privadas
                                    args = [a.arg for a in node.args.args]
                                    docstring = ast.get_docstring(node) or ""
                                    resultados.append({
                                        "nome": nome,
                                        "caminho": caminho,
                                        "modulo": modulo,
                                        "args": args,
                                        "docstring": docstring
                                    })
                                    total_funcoes += 1
                except Exception as e:
                    print(f"‚ùå Erro ao processar {caminho}: {e}")
    
    print(f"üìä Processados {total_arquivos} arquivos, encontradas {total_funcoes} fun√ß√µes")
    return resultados

def gerar_wrappers(funcoes, destino_path):
    """Gera os wrappers autom√°ticos organizados por categoria."""
    # Agrupar por classe de wrapper
    wrappers_dict = {}
    metadados_dict = {}
    
    for func in funcoes:
        wrapper_class, objetivo, finalidade = categoria_objetivo_finalidade(func["caminho"])
        if wrapper_class not in wrappers_dict:
            wrappers_dict[wrapper_class] = []
            metadados_dict[wrapper_class] = (objetivo, finalidade)
        wrappers_dict[wrapper_class].append(func)

    # Gerar arquivo de wrappers
    with open(destino_path, "w", encoding="utf-8") as f:
        f.write('''"""
Wrappers Autom√°ticos para Fun√ß√µes Anal√≠ticas
============================================

Gerado automaticamente por scripts/gerar_wrappers_funcoes.py

Cada wrapper inclui:
- Objetivo espec√≠fico da categoria
- Finalidade no pipeline de IA/heur√≠sticas
- Adapta√ß√£o universal de tipos de retorno
- Metadados para documenta√ß√£o autom√°tica

‚ö†Ô∏è N√ÉO EDITAR MANUALMENTE - Este arquivo ser√° sobrescrito na pr√≥xima gera√ß√£o.
"""

import numpy as np
import pandas as pd
from typing import Union, List, Any, Optional

''')

        f.write("# ========== WRAPPERS POR CATEGORIA ==========\n\n")
        
        for wrapper_class, funclist in wrappers_dict.items():
            objetivo, finalidade = metadados_dict[wrapper_class]
            
            # Header da classe
            f.write(f"class {wrapper_class}:\n")
            f.write(f'    """\n')
            f.write(f'    {wrapper_class}\n')
            f.write(f'    {"=" * len(wrapper_class)}\n')
            f.write(f'    \n')
            f.write(f'    Objetivo: {objetivo}\n')
            f.write(f'    Finalidade no pipeline: {finalidade}\n')
            f.write(f'    \n')
            f.write(f'    Fun√ß√µes dispon√≠veis: {len(funclist)}\n')
            f.write(f'    """\n\n')
            
            # Wrapper universal adaptativo
            f.write('    @staticmethod\n')
            f.write('    def apply_function(func, data, *args, **kwargs):\n')
            f.write('        """\n')
            f.write('        Aplica fun√ß√£o a dados, adaptando tipo de retorno para integra√ß√£o universal.\n')
            f.write('        \n')
            f.write('        Args:\n')
            f.write('            func: Fun√ß√£o a ser aplicada\n')
            f.write('            data: Dados de entrada\n')
            f.write('            *args: Argumentos posicionais adicionais\n')
            f.write('            **kwargs: Argumentos nomeados adicionais\n')
            f.write('            \n')
            f.write('        Returns:\n')
            f.write('            List[Any]: Resultado padronizado para integra√ß√£o no pipeline\n')
            f.write('        """\n')
            f.write('        try:\n')
            f.write('            result = func(data, *args, **kwargs)\n')
            f.write('            \n')
            f.write('            # Caso especial: fun√ß√µes que j√° retornam lista padronizada\n')
            f.write('            if hasattr(result, "__is_wrapped__"):\n')
            f.write('                return result\n')
            f.write('                \n')
            f.write('            if isinstance(result, (list, tuple)):\n')
            f.write('                return list(result)[:10]  # Limite razo√°vel para contexto\n')
            f.write('                \n')
            f.write('            elif isinstance(result, dict):\n')
            f.write('                return list(result.values())[:10]\n')
            f.write('                \n')
            f.write('            elif isinstance(result, (int, float)):\n')
            f.write('                return [float(result)]\n')
            f.write('                \n')
            f.write('            elif isinstance(result, complex):\n')
            f.write('                return [result.real, result.imag]\n')
            f.write('                \n')
            f.write('            elif hasattr(result, "shape"):  # numpy arrays, pandas Series\n')
            f.write('                flattened = result.flatten() if hasattr(result, "flatten") else result\n')
            f.write('                return flattened.tolist()[:10]\n')
            f.write('                \n')
            f.write('            elif result is None:\n')
            f.write('                return []\n')
            f.write('                \n')
            f.write('            elif isinstance(result, (str, bool)):\n')
            f.write('                return [str(result)]\n')
            f.write('                \n')
            f.write('            else:\n')
            f.write('                # Fallback: converter para string e limitar\n')
            f.write('                return [str(result)[:100]]\n')
            f.write('                \n')
            f.write('        except Exception as e:\n')
            f.write('            # Retorna erro de forma padronizada\n')
            f.write('            return [f"ERROR: {type(e).__name__}: {str(e)[:50]}"]\n')
            f.write('\n')
            
            # Gerar wrapper para cada fun√ß√£o
            for func in funclist:
                args_str = ", ".join(func["args"])
                args_pass = ", ".join(func["args"])
                doc = func["docstring"]
                
                f.write(f"    @staticmethod\n")
                f.write(f"    def {func['nome']}({args_str}):\n")
                f.write(f'        """\n')
                if doc:
                    # Preservar formata√ß√£o original do docstring
                    for line in doc.split('\n'):
                        f.write(f'        {line}\n')
                f.write(f'        \n')
                f.write(f'        Categoria: {wrapper_class}\n')
                f.write(f'        M√≥dulo: {func["modulo"]}\n')
                f.write(f'        """\n')
                f.write(f"        from lib.funcoes_analiticas.{func['modulo']} import {func['nome']}\n")
                f.write(f"        return {wrapper_class}.apply_function({func['nome']}, {args_pass})\n")
                f.write("\n")
            
            f.write("\n" + "#" * 80 + "\n\n")
    
    # Estat√≠sticas finais
    total_wrappers = sum(len(funclist) for funclist in wrappers_dict.values())
    print(f"‚úÖ Wrappers gerados em: {destino_path}")
    print(f"üìà Estat√≠sticas:")
    print(f"   ‚îî‚îÄ‚îÄ Categorias: {len(wrappers_dict)}")
    print(f"   ‚îî‚îÄ‚îÄ Wrappers criados: {total_wrappers}")
    
    # Listar categorias com contagem
    for wrapper_class, funclist in wrappers_dict.items():
        print(f"   ‚îî‚îÄ‚îÄ {wrapper_class}: {len(funclist)} fun√ß√µes")

def main():
    """Fun√ß√£o principal com tratamento robusto de erros."""
    try:
        print("üöÄ Iniciando gera√ß√£o de wrappers autom√°ticos...")
        
        if not os.path.exists(BASE_DIR):
            print(f"‚ùå Diret√≥rio base n√£o encontrado: {BASE_DIR}")
            return
        
        funcoes = extrair_funcoes(BASE_DIR)
        
        if not funcoes:
            print("‚ùå Nenhuma fun√ß√£o encontrada para processar")
            return
            
        # Criar diret√≥rio de destino se n√£o existir
        os.makedirs(os.path.dirname(WRAPPER_MODULE_PATH), exist_ok=True)
        
        gerar_wrappers(funcoes, WRAPPER_MODULE_PATH)
        
        print("üéâ Gera√ß√£o conclu√≠da com sucesso!")
        
    except Exception as e:
        print(f"üí• Erro cr√≠tico durante a gera√ß√£o: {e}")
        raise

if __name__ == "__main__":
    main()
